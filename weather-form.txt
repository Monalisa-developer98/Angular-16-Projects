<div class="container p-5">
    <form #weatherForm="ngForm" (ngSubmit)="onSubmit(weatherForm)">
      <div class="mb-3">
        <label for="latitude" class="form-label">Latitude</label>
        <input type="text" id="latitude" name="latitude" class="form-control" [(ngModel)]="latitude" required>
        <p *ngIf="latitudeError" class="text-danger">{{ latitudeError }}</p>
      </div>
      <div class="mb-3">
        <label for="longitude" class="form-label">Longitude</label>
        <input type="text" id="longitude" name="longitude" class="form-control" [(ngModel)]="longitude" required>
        <p *ngIf="longitudeError" class="text-danger">{{ longitudeError }}</p>
      </div>
      <button type="submit" class="btn btn-primary">Get Weather</button>
      <!-- <button type="submit" class="btn btn-primary" [disabled]="!weatherForm.form.valid">Get Weather</button> -->
    </form>
 
</div> 
    <!-- Loader -->
    <div *ngIf="loading" class="loader"></div>
  
    <!-- Show weather details from right sidebar -->
    <div [ngClass]="{'slide-in': showWeatherInfo, 'slide-out': !showWeatherInfo}" class="weather-info text-white p-5">
      <div *ngIf="weatherData && !loading">
        <!-- <h2 class="h2 mb-4">Weather Information</h2> -->
        <div class="row">
            <div class="col-4">
                <img [src]="weatherData.current.condition.icon" alt="">
            </div>
            <div class="col-8">
                <p class="city">{{ weatherData.location.name }}</p>
                <p class="day">{{ dayName }}</p>
                <p class="temperature">{{ weatherData.current.temp_c }} Â°C</p>
            </div>
        </div>
      </div>
      <a class="menu-close-button" href="" (click)="closeWeatherInfo($event)">
        <div class="outer">
          <div class="inner"><label>CLOSE</label></div>
        </div>
      </a>
    </div>

  ==========================================================================

import { Component } from '@angular/core';
import { HttpClient, HttpHeaders } from '@angular/common/http';

@Component({
  selector: 'app-weather-api',
  templateUrl: './weather-api.component.html',
  styleUrl: './weather-api.component.css'
})

export class WeatherApiComponent {
  latitude: string = '';
  longitude: string = '';
  weatherData: any;
  loading: boolean = false;
  getResponse: any;
  dayName: string = '';

  // Error messages
  latitudeError: string | null = null;
  longitudeError: string | null = null;
  showWeatherInfo: boolean | undefined;

  constructor(private http: HttpClient) {}

  onSubmit(form: any) {

    const lat = parseFloat(this.latitude);
    const lon = parseFloat(this.longitude);

    // Validate Latitude
    if (this.latitude === '') {
      this.latitudeError = 'Please enter latitude';
    } else if (!this.validateLatitude(lat)) {
      this.latitudeError = 'Latitude must be a number between -90 and 90.';
    } else {
      this.latitudeError = null;
    }

    // Validate Longitude
    if (this.longitude === '') {
      this.longitudeError = 'Please enter longitude';
    } else if (!this.validateLongitude(lon)) {
      this.longitudeError = 'Longitude must be a number between -180 and 180.';
    } else {
      this.longitudeError = null;
    }

    if (!this.latitudeError && !this.longitudeError) {
      this.loading = true;  // Show the loader
      this.getWeatherData(lat, lon).then(() => {
        this.resetForm(form);
      });
    }

  }

  resetForm(form: any) {
    form.resetForm();
    this.latitude = '';
    this.longitude = '';
    this.latitudeError = null;
    this.longitudeError = null;
  }

  getWeatherData(lat: number, lon: number) {

  let headers = new HttpHeaders({
    'X-RapidAPI-Key': 'ea24643988mshd837e9c29bf106fp1acfc1jsn156d44634ca2',
    'X-RapidAPI-Host': 'weatherapi-com.p.rapidapi.com'
  });

  const urlStr = `https://weatherapi-com.p.rapidapi.com/current.json?q=${lat},${lon}`;

  return new Promise((resolve, reject)=>{

    this.getResponse = this.http.get(urlStr, {headers: headers});
    this.getResponse.subscribe((data: any) => {
     this.weatherData = data;
     this.loading = false;  // Hide the loader
     this.showWeatherInfo = true;  // Show the weather info
     this.extractDayName(data.location.localtime); // Extract the day name
     resolve(this.weatherData);
    }, (error: any) => {
      console.error('Error fetching weather data ' + JSON.stringify(error));
      this.loading = false;  // Hide the loader
      reject(error);
    }
  );
}); 
}

extractDayName(localtime: string) {
  const date = new Date(localtime);
  const options: Intl.DateTimeFormatOptions = { weekday: 'long' };  // Correct type assignment
  this.dayName = date.toLocaleDateString('en-US', options);
}
validateLatitude(lat: number): boolean {
  return !isNaN(lat) && lat >= -90 && lat <= 90;
}

validateLongitude(lon: number): boolean {
  return !isNaN(lon) && lon >= -180 && lon <= 180;
}

closeWeatherInfo(event: Event) {
  event.preventDefault();
  this.showWeatherInfo = false;
}

}


=============================================================================


/* HTML: <div class="loader"></div> */
.loader {
    width: 50px;
    padding: 8px;
    aspect-ratio: 1;
    border-radius: 50%;
    background: #25b09b;
    --_m: 
      conic-gradient(#0000 10%,#000),
      linear-gradient(#000 0 0) content-box;
    -webkit-mask: var(--_m);
            mask: var(--_m);
    -webkit-mask-composite: source-out;
            mask-composite: subtract;
    animation: l3 1s infinite linear;
    margin: 20px auto;
  }
  @keyframes l3 {to{transform: rotate(1turn)}}

.weather-info {
    width: 500px;
    height: 100vh;
    min-height: 100vh;
    margin: 0;
    padding: 0;
    position: fixed;
    transform: translateX(100%);
    right: 0;
    top: 0;
    z-index: 9;
    background: #495c6a;
    transition: 1s cubic-bezier(.858, .01, .068, .99);
    transition-delay: .7s;
    z-index: 9999999999;
    background-size: auto;
    background-position: 100% 100%;
    background-repeat: no-repeat;
    padding: 120px 20px 20px 20px !important;
}
.slide-in.weather-info{
    transform: translateX(0);
    transition-delay: .1s;   
}
.weather-info.slide-out {
    transform: translateX(100%);
}

.weather-label{
    font-size: 25px;
    line-height: 35px;
    letter-spacing: 0.5px;
}
.weather-info p{
    font-size: 24px;
    line-height: 30px;
    margin-bottom: 10px;
}
.h2{
    text-decoration: underline;
}
  

/* ------------- close-btn ------------ */
.menu-close-button {
    opacity: 0;
    position: fixed;
    right: 43px;
    top: 28px;
    z-index: 9999999999;
    visibility: hidden;
}
.menu-close-button .outer {
    position: relative;
    margin: auto;
    width: 50px;
    cursor: pointer;
}
.menu-close-button .inner {
    width: inherit;
    text-align: center;
}
.menu-close-button .inner:after, .menu-close-button .inner:before {
    position: absolute;
    content: "";
    height: 2px;
    width: 35px;;
    background: #fff;
    left: 0;
    transition: all .3s ease-in;
}
.menu-close-button .inner:before {
    top: 50%;
    transform: rotate(45deg);
}
.menu-close-button .inner:after {
    bottom: 47%;
    transform: rotate(-45deg);
}
.weather-info.slide-in .menu-close-button {
    opacity: 1;
    visibility: visible;
    transition: opacity .2s ease 1s, transform 2s ease;
    transform: translateX(0) !important;
    position: fixed !important;
}
.menu-close-button label {
    font-size: .8em;
    line-height: 4em;
    text-transform: uppercase;
    color: #fff;
    transition: all .3s ease-in;
    opacity: 0;
    cursor: pointer;
    display: inline-block;
}


/* -------------------------------------------- */
input{
    height: 44px !important;
    border-radius: 0;
    border: 1px solid #eeebeb;
    font-size: 14px;
    line-height: 24px;
    font-weight: 500;
}
form{
    padding: 20px 25px;
    box-shadow: 0 11px 38px #0000001a;
    width: 50%;
    margin: 0 auto;
}
.form-label{
    font-weight: 600;
    font-size: 22px;
}
button{
    display: block;
    margin: 20px auto;
    background-color: #495c6a !important;
    border: 2px solid #495c6a;
}
.temperature{
    font-size: 50px !important;
    font-weight: bold;
    line-height: 55px !important;
}
.weather-info img{
    width: 100%;
    padding-left: 40px;
}
.day{
    color: #256FD5;
    background-color: #FFFFFF;
    display: inline-block;
    padding: 10px 24px;
    border-radius: 6px;
    font-weight: 500;
}